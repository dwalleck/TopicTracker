name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-first-verification:
    name: Verify Test-First Development
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for test-first verification
    
    - name: Verify Test-First Development
      run: |
        chmod +x ./scripts/verify-test-first.sh
        ./scripts/verify-test-first.sh

  code-coverage:
    name: Code Coverage Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check Code Coverage
      run: |
        chmod +x ./scripts/check-coverage.sh
        ./scripts/check-coverage.sh
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: test/TopicTracker.Test/*.cobertura.xml

  documentation-verification:
    name: Verify Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Verify Documentation
      run: |
        chmod +x ./scripts/verify-documentation.sh
        ./scripts/verify-documentation.sh

  build-warnings-check:
    name: No Compiler Warnings
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Build with warnings as errors
      run: |
        dotnet build -warnaserror -p:TreatWarningsAsErrors=true
    
    - name: Run tests with TUnit
      run: |
        cd test/TopicTracker.Test
        dotnet run --configuration Release

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Run benchmarks
      run: |
        if [ -d "test/TopicTracker.Benchmarks" ]; then
          cd test/TopicTracker.Benchmarks
          dotnet run -c Release --exporters json
          
          # Check if performance meets requirements (<100μs)
          if [ -f "BenchmarkDotNet.Artifacts/results/*.json" ]; then
            echo "Benchmark results will be analyzed when benchmark project is implemented"
          fi
        else
          echo "Benchmark project not yet implemented"
        fi

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [test-first-verification, code-coverage, documentation-verification, build-warnings-check]
    if: always()
    
    steps:
    - name: Quality Gate Summary
      run: |
        echo "## 📊 TopicTracker Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        if [ "${{ needs.test-first-verification.result }}" == "success" ]; then
          echo "✅ Test-First Development: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Test-First Development: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-coverage.result }}" == "success" ]; then
          echo "✅ Code Coverage (>90%): PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Coverage (>90%): FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.documentation-verification.result }}" == "success" ]; then
          echo "✅ Documentation: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Documentation: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-warnings-check.result }}" == "success" ]; then
          echo "✅ No Compiler Warnings: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No Compiler Warnings: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Performance targets
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Performance Targets" >> $GITHUB_STEP_SUMMARY
        echo "- Message Capture: <100μs latency" >> $GITHUB_STEP_SUMMARY
        echo "- Throughput: 10,000+ messages/second" >> $GITHUB_STEP_SUMMARY
        echo "- Zero allocations on hot paths" >> $GITHUB_STEP_SUMMARY
        
        # Overall result
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test-first-verification.result }}" == "success" ] && \
           [ "${{ needs.code-coverage.result }}" == "success" ] && \
           [ "${{ needs.documentation-verification.result }}" == "success" ] && \
           [ "${{ needs.build-warnings-check.result }}" == "success" ]; then
          echo "### ✅ All Quality Gates Passed!" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "### ❌ Quality Gates Failed!" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed checks above." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi